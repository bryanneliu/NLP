@perl -Sx %0 %*
@goto :eof
#!perl

use Digest::MD5;
use File::Temp qw/ :mktemp  /;

sub usage {

print <<EOM;

Usage: test_compiler_cmp --cmd-comp <CMD1> --cmd-run <CMD2> --cmd-exp <CMD3>

Tests any compiler-like program by compiling the data with <CMD1> and then
executing the interpreter with <CMD2> and comparing its output with the output
generated by <CMD3>.

  --test - just prints out <CMD1>, <CMD2>, <CMD3> without any execution

  --cmd-comp <CMD1> - compilation command line

  --cmd-run  <CMD2> - generates output to STDOUT

  --cmd-exp  <CMD3> - generates expected output to STDOUT
EOM
}


$status = 0;
$type = 0;
$test = 0;
$cmd_comp = "";
$cmd_run = "";
$cmd_exp = "";

while (0 < 1 + $#ARGV) {

    if ((1 == $type) && !($ARGV [0] =~ /^--cmd-.+/)) {

      $cmd_comp .= ($ARGV [0] . " ");

    } elsif ((2 == $type) && !($ARGV [0] =~ /^--cmd-.+/)) {

      $cmd_run .= ($ARGV [0] . " ");

    } elsif ((3 == $type) && !($ARGV [0] =~ /^--cmd-.+/)) {

      $cmd_exp .= ($ARGV [0] . " ");

    } elsif ("--help" eq $ARGV [0] or "-help" eq $ARGV [0] or "/?" eq $ARGV [0]) {

      usage ();
      exit (0);

    } elsif ($ARGV [0] eq "--test") {

      $test = 1;

    } elsif ("--cmd-comp" eq $ARGV [0]) {

      $cmd_comp = "";
      $type = 1;

    } elsif ("--cmd-run" eq $ARGV [0]) {

      $cmd_run = "";
      $type = 2;

    } elsif ("--cmd-exp" eq $ARGV [0]) {

      $cmd_exp = "";
      $type = 3;
    }

    shift @ARGV;
}


if ("" eq $cmd_comp) {
    printf "ERROR: Compilation command line is not specified!\n";
    usage ();
    exit 1;
}
if ("" eq $cmd_run) {
    printf "ERROR: Run-time command line is not specified!\n";
    usage ();
    exit 1;
}
if ("" eq $cmd_exp) {
    printf "ERROR: Expected output command line is not specified!\n";
    usage ();
    exit 1;
}

if (1 == $test) {

  print STDERR "Compilation     : \"$cmd_comp\"\n" ;
  print STDERR "Execution       : \"$cmd_run\"\n" ;
  print STDERR "Expected output : \"$cmd_exp\"\n" ;

  exit 0;
}


($fh, $output) = mkstemp ("test_compiler_cmp_XXXXX");
close $OUTPUT;
($fh, $exp_output) = mkstemp ("test_compiler_cmp_XXXXX");
close $fh;

# compile
`$cmd_comp` ;

# run
`$cmd_run > $output` ;

# generate expected output
`$cmd_exp > $exp_output` ;


if(-z $output && -z $exp_output) {
  print STDERR "ERROR: Output and expected output are empty\n";
  exit 1;
}


# compare generated output and expected output

open(FILE, $output) or die "ERROR: Can't open '$output': $!";
binmode(FILE);
$sig1 = Digest::MD5->new->addfile(*FILE)->hexdigest ;
close(FILE);

open(FILE, $exp_output) or die "ERROR: Can't open '$exp_output': $!";
binmode(FILE);
$sig2 = Digest::MD5->new->addfile(*FILE)->hexdigest ;
close(FILE);

if ($sig2 eq $sig1) {

  print STDERR "\nPASSED\n" ;

} else {

  $status = 1 ;
  print STDERR "\nFAILED\n" ;
  print STDERR "  Generated Output: $output\n" ;
  print STDERR "  Expected Output : $exp_output\n" ;
}



END {
    if ((0 == $status) && (-e $output)) {
      unlink $output ;
    }
    if ((0 == $status) && (-e $exp_output)) {
      unlink $exp_output ;
    }
}

